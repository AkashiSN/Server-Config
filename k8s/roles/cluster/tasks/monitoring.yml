---
# file: roles/cluster/tasks/monitoring.yml
- name: Create the 'monitoring' namespace
  kubernetes.core.k8s:
    state: present
    api_version: v1
    name: monitoring
    kind: Namespace
  become: false

# Helm charts
- name: Add grafana Helm charts repository
  kubernetes.core.helm_repository:
    name: grafana
    repo_url: https://grafana.github.io/helm-charts
  become: false

- name: Add prometheus-community Helm charts repository
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: https://prometheus-community.github.io/helm-charts
  become: false

# Prometheus
- name: Check if prometheus Helm chart is installed
  shell: helm list -n monitoring --deployed --short | grep prometheus
  register: prometheus_helm_chart_result
  changed_when: prometheus_helm_chart_result.rc != 0
  ignore_errors: yes
  become: false

- name: Deploy prometheus chart using set values on target
  kubernetes.core.helm:
    release_name: prometheus
    chart_ref: prometheus-community/prometheus
    release_namespace: monitoring
    create_namespace: true
    update_repo_cache: true
    wait: true
    atomic: true
    release_values:
      server:
        persistentVolume:
          storageClass: truenas-nfs-csi
      alertmanager:
        persistence:
          storageClass: truenas-nfs-csi
  when: prometheus_helm_chart_result.rc != 0
  become: false

# Loki
- name: Check if loki Helm chart is installed
  shell: helm list -n monitoring --deployed --short | grep loki
  register: loki_helm_chart_result
  changed_when: loki_helm_chart_result.rc != 0
  ignore_errors: yes
  become: false

- name: Deploy loki chart using set values on target
  kubernetes.core.helm:
    release_name: loki
    chart_ref: grafana/loki
    release_namespace: monitoring
    create_namespace: true
    update_repo_cache: true
    wait: true
    atomic: true
    release_values:
      loki:
        auth_enabled: false
        commonConfig:
          replication_factor: 1
        storage:
          type: filesystem
      singleBinary:
        replicas: 1
        persistence:
          storageClass: truenas-nfs-csi
  when: loki_helm_chart_result.rc != 0
  become: false

# Promtail
- name: Check if promtail Helm chart is installed
  shell: helm list -n monitoring --deployed --short | grep promtail
  register: promtail_helm_chart_result
  changed_when: promtail_helm_chart_result.rc != 0
  ignore_errors: yes
  become: false

- name: Deploy promtail chart on target
  kubernetes.core.helm:
    release_name: promtail
    chart_ref: grafana/promtail
    release_namespace: monitoring
    create_namespace: true
    update_repo_cache: true
    wait: true
    atomic: true
  when: promtail_helm_chart_result.rc != 0
  become: false

# Grafana
- name: Check if grafana Helm chart is installed
  shell: helm list -n monitoring --deployed --short | grep grafana
  register: grafana_helm_chart_result
  changed_when: grafana_helm_chart_result.rc != 0
  ignore_errors: yes
  become: false

- name: Create grafana-secrets
  kubernetes.core.k8s:
    state: present
    api_version: v1
    namespace: monitoring
    name: grafana-secrets
    kind: Secret
    definition:
      type: Opaque
      data:
        admin-user: "{{ grafana_admin_user | b64encode }}"
        admin-password: "{{ grafana_admin_password | b64encode }}"
  become: false

- name: Deploy grafana chart using set values on target
  kubernetes.core.helm:
    release_name: grafana
    chart_ref: grafana/grafana
    release_namespace: monitoring
    create_namespace: true
    update_repo_cache: true
    wait: true
    atomic: true
    release_values:
      admin:
        existingSecret: grafana-secrets
      persistence:
        enabled: true
        storageClassName: truenas-nfs-csi
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              url: http://prometheus-server
              access: proxy
              isDefault: true
            - name: Loki
              type: loki
              access: proxy
              url: http://loki:3100
              jsonData:
                maxLines: 5000
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
        hosts:
          - "{{ grafana_host }}"
        tls:
          - secretName: letsencrypt-cert
            hosts:
            - "{{ grafana_host }}"
  when: grafana_helm_chart_result.rc != 0
  become: false

- name: Copy monitoring.shutdown script
  ansible.builtin.copy:
    src: monitoring.shutdown
    dest: /usr/lib/systemd/kube-shutdown/monitoring.shutdown
    mode: 0755
  become: true